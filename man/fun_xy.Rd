% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolate.R
\name{fun_xy}
\alias{fun_xy}
\title{Interpolation between curve points}
\usage{
fun_xy(df_mtp, x_out, x_name = "hours", y_name = "fit",
  feat_name = x_name)
}
\arguments{
\item{df_mtp}{The data frame containing \code{x} and \code{y} to interpolate}

\item{x_out}{the \code{x} to evaluate \code{y}}

\item{x_name}{the name of \code{x} (chr) in the data frame}

\item{y_name}{the name of \code{y} (chr) in the data frame}

\item{feat_name}{the root name of the feature, defaults to \code{x_name}}
}
\value{
returns a data frame with \code{feature} and \code{value}
}
\description{
The function will currently find the mean \code{y} for a given \code{x}. Only
works for monotonic functions. A future enhancement could be to loop through
\code{y} segments to find \code{y} for a given \code{x} within each segment.
This would be equivalent to rough root finding function. Such segments could
be found using: \code{rlen(x > x_out)}
}
\examples{
# An example
df <- dplyr::data_frame(hours = 1:10, fit = 2*hours)
class(df) <- c("mtp", "data.frame", "tbl_df")
ggplot2::qplot(x= hours, y = fit, data = df, geom = "line")
fun_xy(df, c(2.5, 3.2, 4.1))

}
\seealso{
\code{\link{mtp_feature}}
}

